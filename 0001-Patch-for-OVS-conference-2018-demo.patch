From 4f5b93769a6579437d2c86fb865fcff14c6a02a8 Mon Sep 17 00:00:00 2001
From: Yi Yang <yang_y_yi@163.com>
Date: Wed, 31 Oct 2018 08:46:16 +0800
Subject: [PATCH] Patch for OVS conference 2018 demo

- Support DPDK 18.08
- Enable interrupt mode and no-huge

Signed-off-by: Yi Yang <yang_y_yi@163.com>
---
 lib/dpdk.c        |   4 +-
 lib/netdev-dpdk.c | 149 ++++++++++++++++++++++++++++++++++++++++++++----------
 2 files changed, 123 insertions(+), 30 deletions(-)

diff --git a/lib/dpdk.c b/lib/dpdk.c
index 0ee3e19..f1e93ce 100644
--- a/lib/dpdk.c
+++ b/lib/dpdk.c
@@ -206,11 +206,11 @@ construct_dpdk_mutex_options(const struct smap *ovs_other_config,
         const char *default_value;
         int default_option;
     } excl_opts[] = {
-        {"memory type",
+        /*{"memory type",
          {"dpdk-alloc-mem", "dpdk-socket-mem", NULL,},
          {"-m",             "--socket-mem",    NULL,},
          default_dpdk_socket_mem, 1
-        },
+        },*/
     };
 
     int i, ret = initial_size;
diff --git a/lib/netdev-dpdk.c b/lib/netdev-dpdk.c
index ac02a09..172abda 100644
--- a/lib/netdev-dpdk.c
+++ b/lib/netdev-dpdk.c
@@ -39,6 +39,7 @@
 #include <rte_vhost.h>
 #include <rte_version.h>
 #include <rte_flow.h>
+#include <rte_interrupts.h>
 
 #include "cmap.h"
 #include "dirs.h"
@@ -167,17 +168,19 @@ typedef uint16_t dpdk_port_t;
 static const struct rte_eth_conf port_conf = {
     .rxmode = {
         .mq_mode = ETH_MQ_RX_RSS,
+        .max_rx_pkt_len = ETHER_MAX_LEN,
         .split_hdr_size = 0,
-        .header_split   = 0, /* Header Split disabled */
-        .hw_ip_checksum = 0, /* IP checksum offload disabled */
-        .hw_vlan_filter = 0, /* VLAN filtering disabled */
-        .jumbo_frame    = 0, /* Jumbo Frame Support disabled */
-        .hw_strip_crc   = 0,
+        //.header_split   = 0, /* Header Split disabled */
+        //.hw_ip_checksum = 0, /* IP checksum offload disabled */
+        //.hw_vlan_filter = 0, /* VLAN filtering disabled */
+        //.jumbo_frame    = 0, /* Jumbo Frame Support disabled */
+        //.hw_strip_crc   = 0,
+        .offloads       = 0,
     },
     .rx_adv_conf = {
         .rss_conf = {
             .rss_key = NULL,
-            .rss_hf = ETH_RSS_IP | ETH_RSS_UDP | ETH_RSS_TCP,
+            .rss_hf = 0x38d34,
         },
     },
     .txmode = {
@@ -364,6 +367,7 @@ struct dpdk_ring {
 struct ingress_policer {
     struct rte_meter_srtcm_params app_srtcm_params;
     struct rte_meter_srtcm in_policer;
+    struct rte_meter_srtcm_profile in_policer_profile;
     rte_spinlock_t policer_lock;
 };
 
@@ -900,19 +904,29 @@ dpdk_eth_dev_port_config(struct netdev_dpdk *dev, int n_rxq, int n_txq)
      * them. The only reliable info is the driver name and knowledge
      * (testing or code review). Listing all such PMDs feels harder
      * than highlighting the one known not to need scatter */
+    rte_eth_dev_info_get(dev->port_id, &info);
+    VLOG_INFO("port %d, driver: %s\n", dev->port_id, info.driver_name);
+    if (strncmp(info.driver_name, "net_vhost", 9) == 0) {
+        conf.rx_adv_conf.rss_conf.rss_hf = 0;
+    }
+    conf.intr_conf.rxq = 1;
+
     if (dev->mtu > ETHER_MTU) {
         rte_eth_dev_info_get(dev->port_id, &info);
         if (strncmp(info.driver_name, "net_nfp", 7)) {
-            conf.rxmode.enable_scatter = 1;
+            conf.rxmode.offloads |= DEV_RX_OFFLOAD_SCATTER;
+        }
+        if (strncmp(info.driver_name, "net_vhost", 9) == 0) {
+            conf.rx_adv_conf.rss_conf.rss_hf = 0;
         }
     }
 
     conf.intr_conf.lsc = dev->lsc_interrupt_mode;
-    conf.rxmode.hw_ip_checksum = (dev->hw_ol_features &
-                                  NETDEV_RX_CHECKSUM_OFFLOAD) != 0;
+    conf.rxmode.offloads |= ((dev->hw_ol_features &
+                                  NETDEV_RX_CHECKSUM_OFFLOAD) != 0 ? DEV_RX_OFFLOAD_CHECKSUM : 0);
 
     if (dev->hw_ol_features & NETDEV_RX_HW_CRC_STRIP) {
-        conf.rxmode.hw_strip_crc = 1;
+        conf.rxmode.offloads |= DEV_RX_OFFLOAD_CRC_STRIP;
     }
 
     /* A device may report more queues than it makes available (this has
@@ -1932,16 +1946,18 @@ netdev_dpdk_eth_tx_burst(struct netdev_dpdk *dev, int qid,
 
 static inline bool
 netdev_dpdk_policer_pkt_handle(struct rte_meter_srtcm *meter,
+                               struct rte_meter_srtcm_profile *meter_profile,
                                struct rte_mbuf *pkt, uint64_t time)
 {
     uint32_t pkt_len = rte_pktmbuf_pkt_len(pkt) - sizeof(struct ether_hdr);
 
-    return rte_meter_srtcm_color_blind_check(meter, time, pkt_len) ==
+    return rte_meter_srtcm_color_blind_check(meter, meter_profile, time, pkt_len) ==
                                                 e_RTE_METER_GREEN;
 }
 
 static int
 netdev_dpdk_policer_run(struct rte_meter_srtcm *meter,
+                        struct rte_meter_srtcm_profile *meter_profile,
                         struct rte_mbuf **pkts, int pkt_cnt,
                         bool should_steal)
 {
@@ -1953,7 +1969,7 @@ netdev_dpdk_policer_run(struct rte_meter_srtcm *meter,
     for (i = 0; i < pkt_cnt; i++) {
         pkt = pkts[i];
         /* Handle current packet */
-        if (netdev_dpdk_policer_pkt_handle(meter, pkt, current_time)) {
+        if (netdev_dpdk_policer_pkt_handle(meter, meter_profile, pkt, current_time)) {
             if (cnt != i) {
                 pkts[cnt] = pkt;
             }
@@ -1975,8 +1991,9 @@ ingress_policer_run(struct ingress_policer *policer, struct rte_mbuf **pkts,
     int cnt = 0;
 
     rte_spinlock_lock(&policer->policer_lock);
-    cnt = netdev_dpdk_policer_run(&policer->in_policer, pkts,
-                                  pkt_cnt, should_steal);
+    cnt = netdev_dpdk_policer_run(&policer->in_policer,
+                                  &policer->in_policer_profile,
+                                  pkts, pkt_cnt, should_steal);
     rte_spinlock_unlock(&policer->policer_lock);
 
     return cnt;
@@ -2104,6 +2121,23 @@ netdev_dpdk_vhost_rxq_recv(struct netdev_rxq *rxq,
     return 0;
 }
 
+static volatile __thread bool intr_status[16][16];
+static volatile __thread bool intr_registered[16][16];
+
+static int event_register(uint16_t portid, uint8_t queueid)
+{
+        uint32_t data;
+        int ret;
+
+        data = portid << CHAR_BIT | queueid;
+
+        ret = rte_eth_dev_rx_intr_ctl_q(portid, queueid,
+                                        RTE_EPOLL_PER_THREAD,
+                                        RTE_INTR_EVENT_ADD,
+                                        (void *)((uintptr_t)data));
+        return ret;
+}
+
 static int
 netdev_dpdk_rxq_recv(struct netdev_rxq *rxq, struct dp_packet_batch *batch,
                      int *qfill)
@@ -2113,18 +2147,51 @@ netdev_dpdk_rxq_recv(struct netdev_rxq *rxq, struct dp_packet_batch *batch,
     struct ingress_policer *policer = netdev_dpdk_get_ingress_policer(dev);
     int nb_rx;
     int dropped = 0;
+    struct rte_epoll_event event[16];
+    int i, n;
+    int timeout = 1;
+    void *data;
+    uint16_t port_id;
+    uint8_t queue_id;
 
     if (OVS_UNLIKELY(!(dev->flags & NETDEV_UP))) {
         return EAGAIN;
     }
 
+    if (!intr_registered[rx->port_id][rxq->queue_id]) {
+        event_register(rx->port_id, rxq->queue_id);
+        intr_registered[rx->port_id][rxq->queue_id] = true;
+    }
+
     nb_rx = rte_eth_rx_burst(rx->port_id, rxq->queue_id,
                              (struct rte_mbuf **) batch->packets,
                              NETDEV_MAX_BURST);
     if (!nb_rx) {
+        if (!intr_status[rx->port_id][rxq->queue_id]) {
+            rte_eth_dev_rx_intr_enable(rx->port_id, rxq->queue_id);
+            intr_status[rx->port_id][rxq->queue_id] = true;
+        }
+        usleep(2);
+        n = rte_epoll_wait(RTE_EPOLL_PER_THREAD, event, 16, 0);
+        if (n > 0) {
+            for (i = 0; i < n; i++) {
+                void * data = event[i].epdata.data;
+                port_id = ((uintptr_t)data) >> CHAR_BIT;
+                queue_id = ((uintptr_t)data) &
+                        RTE_LEN2MASK(CHAR_BIT, uint8_t);
+                rte_eth_dev_rx_intr_disable(port_id, queue_id);
+                intr_status[port_id][queue_id] = false;
+                VLOG_INFO("port: %u, queue: %u gets an interrupt\n", port_id, queue_id);
+            }
+        }
         return EAGAIN;
     }
 
+    if (intr_status[rx->port_id][rxq->queue_id]) {
+            rte_eth_dev_rx_intr_disable(rx->port_id, rxq->queue_id);
+            intr_status[rx->port_id][rxq->queue_id] = false;
+    }
+
     if (policer) {
         dropped = nb_rx;
         nb_rx = ingress_policer_run(policer,
@@ -2764,8 +2831,16 @@ netdev_dpdk_policer_construct(uint32_t rate, uint32_t burst)
     policer->app_srtcm_params.cir = rate_bytes;
     policer->app_srtcm_params.cbs = burst_bytes;
     policer->app_srtcm_params.ebs = 0;
+    err = rte_meter_srtcm_profile_config(&policer->in_policer_profile,
+                                 &policer->app_srtcm_params);
+    if (err) {
+        VLOG_ERR("Could not create rte meter for ingress policer");
+        free(policer);
+        return NULL;
+    }
+
     err = rte_meter_srtcm_config(&policer->in_policer,
-                                    &policer->app_srtcm_params);
+                                    &policer->in_policer_profile);
     if (err) {
         VLOG_ERR("Could not create rte meter for ingress policer");
         free(policer);
@@ -3040,11 +3115,13 @@ netdev_dpdk_get_status(const struct netdev *netdev, struct smap *args)
     smap_add_format(args, "if_descr", "%s %s", rte_version(),
                                                dev_info.driver_name);
 
-    if (dev_info.pci_dev) {
+    if (dev_info.device) {
+        struct rte_pci_device *pci_dev =  RTE_DEV_TO_PCI(dev_info.device);
+
         smap_add_format(args, "pci-vendor_id", "0x%x",
-                        dev_info.pci_dev->id.vendor_id);
+                        pci_dev->id.vendor_id);
         smap_add_format(args, "pci-device_id", "0x%x",
-                        dev_info.pci_dev->id.device_id);
+                        pci_dev->id.device_id);
     }
 
     return 0;
@@ -3724,6 +3801,7 @@ struct egress_policer {
     struct qos_conf qos_conf;
     struct rte_meter_srtcm_params app_srtcm_params;
     struct rte_meter_srtcm egress_meter;
+    struct rte_meter_srtcm_profile egress_meter_profile;
 };
 
 static void
@@ -3746,8 +3824,17 @@ egress_policer_qos_construct(const struct smap *details,
     policer = xmalloc(sizeof *policer);
     qos_conf_init(&policer->qos_conf, &egress_policer_ops);
     egress_policer_details_to_param(details, &policer->app_srtcm_params);
-    err = rte_meter_srtcm_config(&policer->egress_meter,
+    err = rte_meter_srtcm_profile_config(&policer->egress_meter_profile,
                                  &policer->app_srtcm_params);
+    if (err) {
+        free(policer);
+        *conf = NULL;
+        err = -err;
+        return err;
+    }
+
+    err = rte_meter_srtcm_config(&policer->egress_meter,
+                                 &policer->egress_meter_profile);
     if (!err) {
         *conf = &policer->qos_conf;
     } else {
@@ -3800,8 +3887,9 @@ egress_policer_run(struct qos_conf *conf, struct rte_mbuf **pkts, int pkt_cnt,
     struct egress_policer *policer =
         CONTAINER_OF(conf, struct egress_policer, qos_conf);
 
-    cnt = netdev_dpdk_policer_run(&policer->egress_meter, pkts,
-                                  pkt_cnt, should_steal);
+    cnt = netdev_dpdk_policer_run(&policer->egress_meter,
+                                  &policer->egress_meter_profile,
+                                  pkts, pkt_cnt, should_steal);
 
     return cnt;
 }
@@ -4101,14 +4189,14 @@ dump_flow_pattern(struct rte_flow_item *item)
         VLOG_DBG("rte flow vlan pattern:\n");
         if (vlan_spec) {
             VLOG_DBG("  Spec: tpid=0x%"PRIx16", tci=0x%"PRIx16"\n",
-                     ntohs(vlan_spec->tpid), ntohs(vlan_spec->tci));
+                     ntohs(vlan_spec->inner_type), ntohs(vlan_spec->tci));
         } else {
             VLOG_DBG("  Spec = null\n");
         }
 
         if (vlan_mask) {
             VLOG_DBG("  Mask: tpid=0x%"PRIx16", tci=0x%"PRIx16"\n",
-                     vlan_mask->tpid, vlan_mask->tci);
+                     vlan_mask->inner_type, vlan_mask->tci);
         } else {
             VLOG_DBG("  Mask = null\n");
         }
@@ -4283,17 +4371,22 @@ add_flow_rss_action(struct flow_actions *actions,
                     struct netdev *netdev) {
     int i;
     struct rte_flow_action_rss *rss;
+    uint16_t * queue_ptr;
 
     rss = xmalloc(sizeof(*rss) + sizeof(uint16_t) * netdev->n_rxq);
     /*
      * Setting it to NULL will let the driver use the default RSS
      * configuration we have set: &port_conf.rx_adv_conf.rss_conf.
      */
-    rss->rss_conf = NULL;
-    rss->num = netdev->n_rxq;
+    rss->types = -1;
+    rss->key_len = 0;
+    rss->key = NULL;
+    rss->queue_num = netdev->n_rxq;
+    queue_ptr = (uint16_t *)(rss + 1) - 1;
+    rss->queue = queue_ptr;
 
-    for (i = 0; i < rss->num; i++) {
-        rss->queue[i] = i;
+    for (i = 0; i < rss->queue_num; i++) {
+        queue_ptr[i] = i;
     }
 
     add_flow_action(actions, RTE_FLOW_ACTION_TYPE_RSS, rss);
@@ -4362,7 +4455,7 @@ netdev_dpdk_add_rte_flow_offload(struct netdev *netdev,
         vlan_mask.tci  = match->wc.masks.vlans[0].tci & ~htons(VLAN_CFI);
 
         /* match any protocols */
-        vlan_mask.tpid = 0;
+        vlan_mask.inner_type = 0;
 
         add_flow_pattern(&patterns, RTE_FLOW_ITEM_TYPE_VLAN,
                          &vlan_spec, &vlan_mask);
-- 
2.1.0

